#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct
{
    unsigned int id;
    char         nome    [21];
    unsigned int idade;
    char         especie [31];
    char         raca    [31];
    char         cor     [21];
    char         tutor   [41];
}
Pet;

unsigned int numero_natural_digitado (char pedido [], char mensagem [], unsigned int maximo)
{
    char   digitacao [1025];
    char*  erro;
    double real;
    
    for(;;) // forever
    {
        printf("%s",pedido);
        fgets (digitacao,1024,stdin);

        real=strtod(digitacao,&erro);
        
        if (*erro!=10) // foi digitado algum caractere não numérico
        {
            printf("%s",mensagem);
        }
        else if (real<0 || real>maximo)
        {
            printf("%s",mensagem);
        }
        else if (real != (unsigned int)real) // foi digitado algum número quebrado, tipo 1.5
        {
            printf("%s",mensagem);
        }      
        else
            break;
    }  
    
    return (unsigned int)real;
}

void digite_texto (char texto [], unsigned int maximo, char pedido [], char mensagem [])
{
    unsigned int errado, i;
    char digitacao [1025];
    
    for(;;) // forever
    {
        printf("%s",pedido);
        fgets (digitacao,maximo,stdin);
        digitacao[strlen(digitacao)-1]='\0';
        
        errado=0/*falso*/;
        for (i=0; digitacao[i]!='\0';i++)
            if (!(digitacao[i]==' ' || (digitacao[i]>='a' && digitacao[i]<='z') || (digitacao[i]>='A' && digitacao[i]<='Z')))
            {
                errado=1/*verdadeiro*/;
                break; // para a verificação, sem nem chegar na marca de fim, '\0', pois já achei um erro
            }
            
        if (errado)
        {
            printf("%s",mensagem);
        }
        else
            break; // para o forever que fica pedindo digitação e redigitação até digitar corretamente
    }
    
    strcpy(texto,digitacao);
}

unsigned int/*boolean*/ id_ja_cadastrado (Pet cli [], unsigned int qtd, unsigned int id)
{
    int i;
    for (i=0; i<qtd; i++)
        if (id==cli[i].id)
            return 1/*verdadeiro*/;
            
    return 0/*falso*/;
}

void cadastrar_pet (Pet cli[], FILE* arquivo, unsigned int* qtd)
{
    rewind(arquivo);
    if (*qtd==1000)
    {
        printf ("Não há espaço para mais pets!\n\n");
    }
    else
    {
        cli[*qtd].id = (*qtd)+1;
        
        digite_texto (cli[*qtd].nome,20,"Nome............: ","O nome deve conter até 20 letras e/ou espaços em branco\n");

        cli[*qtd].idade=numero_natural_digitado ("Idade (em meses): ","A Idade deve ser 1 ou 2 ou 3 ou etc, até 480; tente novamente!\n",480);

        digite_texto (cli[*qtd].especie,30,"Especie.........: ","A especie deve conter até 30 letras e/ou espaços em branco\n");
        digite_texto (cli[*qtd].raca,   30,"Raça............: ","A raça deve conter até 30 letras e/ou espaços em branco\n");
        digite_texto (cli[*qtd].cor,    20,"Cor.............: ","A cor deve conter até 20 letras e/ou espaços em branco\n");
        digite_texto (cli[*qtd].tutor,  40,"Tutor...........: ","O nome do tutor deve conter até 40 letras e/ou espaços em branco\n");

        (*qtd)++;
        
        fwrite(&cli[*qtd], 1, 156, arquivo); //Escrevo essa váriavel no arquivo passado por parametro
        printf("Cadastro realizado com sucesso!\n\n");
        fflush(arquivo);
    }
}

void listar_pets (Pet cli[], unsigned int qtd)
{
    unsigned int i;
    
    if (qtd==0)
    {
        printf ("Não há pets cadastrados!\n\n");
        return;
    }
    
    for(i = 0; i < qtd; i++)
    {
        printf("%s %u %s %s %s %s\n",cli[i].nome, cli[i].idade, cli[i].especie, cli[i].raca, cli[i].cor, cli[i].tutor);
    }

    printf("\n");
}

void listar_pet (Pet cli[], unsigned int qtd)
{
    unsigned int id, i;
    
    if (qtd==0)
    {
        printf ("Não há pets cadastrados!\n\n");
        return;
    }
    
    id=numero_natural_digitado("Id: ","O Id deve ser 1 ou 2 ou 3 ou etc; tente novamente!\n\n",4294967295);
    
    for(i = 0; i < qtd; i++)
    {
        if(cli[i].id == id){
            printf("%s %u %s %s %s %s\n", cli[i].nome, cli[i].idade, cli[i].especie, cli[i].raca, cli[i].cor, cli[i].tutor);
            return;
        }
    }
        
    printf ("Não existe pet cadastrado com este id!\n\n");
}

void atualizar_pet(Pet cli[], unsigned int qtd)
{
    unsigned int opcao;
    
    if (qtd==0)
    {
        printf ("Não há pets cadastrados!\n\n");
        return;
    }
    
    unsigned int i, id=numero_natural_digitado("Id: ","O Id deve ser 1 ou 2 ou 3 ou etc; tente novamente!\n\n",4294967295);
    
    Pet* desejado;
    
    for()
    
    while(fgets(&petLido, 156, arquivo)){ //Enquanto eu ler uma linha do arquivo
        if (petLido[0] == id){ //Verifica se o Id do pet lido (será sempre o primeiro char) é igual ao id procurado
        
            char* token;
            
            token = strtok(petLido, "|");
            desejado.id = atoi(token);
            
            token = strtok(NULL, "|");
            strcpy(&desejado.nome, token);
            
            token = strtok(NULL, "|");
            desejado.idade = atoi(token);
            
            token = strtok(NULL, "|");
            strcpy(&desejado.especie, token);
            
            token = strtok(NULL, "|");
            strcpy(&desejado.raca, token);
            
            token = strtok(NULL, "|");
            strcpy(&desejado.cor, token);
            
            token = strtok(NULL, "|");
            strcpy(&desejado.tutor, token);
            
            achou = '1';
            break;
        }else{
            fprintf(temporario, petLido);
        }
    }
        
    if(achou == '0'){
        printf ("Não existe pet cadastrado com este id!\n\n");
        return;
    }
    else{
        printf("ATUALIZAR UM PET\n");
        do
        {
            printf("0) Atualizar nome\n");
            printf("1) Atualizar idade\n");
            printf("2) Atualizar especie\n");
            printf("3) Atualizar raca\n");
            printf("4) Atualizar cor\n");
            printf("5) Atualizar tutor\n");
            printf("6) Sair\n");
            opcao=numero_natural_digitado ("Opção? ","Opções válidas estão entre 0 e 6; tente novamente!\n\n",6);
            
            switch (opcao)
            {
                case 0:
                    digite_texto (&desejado.nome,20,"Nome............: ","O nome deve conter até 20 letras e/ou espaços em branco\n");
                    break;
                    
                case 1:
                    desejado.idade=numero_natural_digitado ("Idade (em meses): ","A Idade deve ser 1 ou 2 ou 3 ou etc, até 480; tente novamente!\n",480);
                    break;
                    
                case 2:
                    digite_texto (&desejado.especie,30,"Especie.........: ","A especie deve conter até 30 letras e/ou espaços em branco\n");
                    break;
                    
                case 3:
                    digite_texto (&desejado.raca,   30,"Raça............: ","A raça deve conter até 30 letras e/ou espaços em branco\n");
                    break;
                    
                case 4:
                    digite_texto (&desejado.cor,    20,"Cor.............: ","A cor deve conter até 20 letras e/ou espaços em branco\n");
                    break;
                    
                case 5:
                    digite_texto (&desejado.tutor,  40,"Tutor...........: ","O nome do tutor deve conter até 40 letras e/ou espaços em branco\n");
                    break;
            }
        }
        while (opcao!=6);
        char total[156];
        
        sprintf(total, "%d|%s|%d|%s|%s|%s|%s", desejado.id, desejado.nome, desejado.idade, desejado.raca,
                                                desejado.especie, desejado.cor, desejado.tutor);
        fprintf(temporario, total);
        
        while(fgets(&petLido, 156, arquivo)){
            fprintf(temporario, petLido);
        }
        
        fclose(arquivo);
        fclose(temporario);
        
        remove("pets.txt");
        rename("petsTemp.txt", "pets.txt");
    
        printf("Pet atualizado com sucesso!\n\n");
    }
}

void excluir_pet (FILE* arquivo, unsigned int* qtd)
{
    rewind(arquivo);
    fflush(arquivo);
    unsigned int id=numero_natural_digitado("Id: ","O Id deve ser 1 ou 2 ou 3 ou etc; tente novamente!\n",4294967295);
    FILE* temporario = fopen("petsTemp.txt", "a+");
    char petLido[156];
    
    id=id+'0'; //Conversão do Id para char, possibilitando a comparação
    char achou = '0';
    while(fgets(&petLido, 156, arquivo)){ //Enquanto eu ler uma linha do arquivo
        if (petLido[0] != id){ //Verifica se o Id do pet lido (será sempre o primeiro char) é igual ao id procurado
            fprintf(temporario, petLido);
        }else{
            achou = '1';
        }
        
    }
            
    if (achou=='0')
    {
        printf ("Não existe pet cadastrado com este id!\n\n");
        
        fclose(temporario);
        remove("petsTemp.txt");
        
        return;
    }else{
        (*qtd)--;
        
        fclose(arquivo);
        fclose(temporario);
        
        remove("pets.txt");
        rename("petsTemp.txt", "pets.txt");
    }
    
    printf("Exclusão realizada com sucesso!\n\n");
}

int main()
{
    FILE* arquivo = fopen("pets.txt" , "ab+");
    unsigned int qtd_de_pets=0, opcao;
    Pet cliente[1000];
    while(fread(&cliente[qtd_de_pets], sizeof(Pet), 1,arquivo) == 1){
        qtd_de_pets++;
    }
    
    printf("PROGRAMA PARA GERENCIAR PETS\n\n");
    
    do
    {
        printf("0) Cadastrar pet\n");
        printf("1) Listar    pet\n");
        printf("2) Listar    pets\n");
        printf("3) Atualizar pets\n");
        printf("4) Excluir   pet\n");
        printf("5) Sair\n");
        opcao=numero_natural_digitado ("Opção? ","Opções válidas estão entre 0 e 5; tente novamente!\n\n",5);
        
        switch (opcao)
        {
            case 0:
                cadastrar_pet(cliente, arquivo, &qtd_de_pets);
                break;
                
            case 1:
                listar_pet(cliente, qtd_de_pets);
                break;
                
            case 2:
                listar_pets(cliente, qtd_de_pets);
                break;
                
            case 3:
                atualizar_pet(cliente, qtd_de_pets);
                break;
                
            case 4:
                excluir_pet(cliente, &qtd_de_pets);
                break;
        }
    }
    while (opcao!=5);
    
    printf("OBRIGADO POR USAR ESTE PROGRAMA!\n\n");
    fclose(arquivo);

    return 0;
}
